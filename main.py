#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé¨ ÁîµËßÜÂâßÊô∫ËÉΩÂâ™ËæëÁ≥ªÁªü - ÈáçÊûÑÁâà
ÁÆÄÊ¥ÅÁªü‰∏ÄÁöÑAIÂàÜÊûêÂíåËßÜÈ¢ëÂâ™ËæëÂ∑•ÂÖ∑
"""

import os
import re
import json
import subprocess
import hashlib
import sys
from typing import List, Dict, Optional
from datetime import datetime

class TVClipperSystem:
    def __init__(self):
        # Ê†áÂáÜÁõÆÂΩïÁªìÊûÑ
        self.srt_folder = "srt"
        self.video_folder = "videos" 
        self.output_folder = "clips"
        self.cache_folder = "analysis_cache"
        self.config_file = ".ai_config.json"

        # ÂàõÂª∫ÁõÆÂΩï
        for folder in [self.srt_folder, self.video_folder, self.output_folder, self.cache_folder]:
            os.makedirs(folder, exist_ok=True)

        print("üé¨ ÁîµËßÜÂâßÊô∫ËÉΩÂâ™ËæëÁ≥ªÁªü")
        print("=" * 50)
        print(f"üìÅ Â≠óÂπïÁõÆÂΩï: {self.srt_folder}/")
        print(f"üé¨ ËßÜÈ¢ëÁõÆÂΩï: {self.video_folder}/")
        print(f"üì§ ËæìÂá∫ÁõÆÂΩï: {self.output_folder}/")

        # Âä†ËΩΩAIÈÖçÁΩÆ
        self.ai_config = self.load_ai_config()

    def load_ai_config(self) -> Dict:
        """Âä†ËΩΩAIÈÖçÁΩÆ"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                if config.get('enabled'):
                    print(f"ü§ñ AIÂàÜÊûê: Â∑≤ÂêØÁî® ({config.get('model', 'Êú™Áü•Ê®°Âûã')})")
                    return config
        except:
            pass

        print("‚ùå AIÂàÜÊûê: Êú™ÈÖçÁΩÆ")
        return {'enabled': False}

    def save_ai_config(self, config: Dict):
        """‰øùÂ≠òAIÈÖçÁΩÆ"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print("‚úÖ AIÈÖçÁΩÆÂ∑≤‰øùÂ≠ò")
        except Exception as e:
            print(f"‚ùå ÈÖçÁΩÆ‰øùÂ≠òÂ§±Ë¥•: {e}")

    def configure_ai_interactive(self) -> bool:
        """‰∫§‰∫íÂºèAIÈÖçÁΩÆ"""
        print("\nü§ñ AIÈÖçÁΩÆÂêëÂØº")
        print("=" * 40)

        providers = {
            "1": {
                "name": "DeepSeek ÂÆòÊñπ",
                "api_type": "official",
                "model": "deepseek-r1"
            },
            "2": {
                "name": "Gemini ÂÆòÊñπ", 
                "api_type": "official",
                "model": "gemini-2.5-flash"
            },
            "3": {
                "name": "DeepSeek ‰∏≠ËΩ¨",
                "api_type": "proxy",
                "base_url": "https://www.chataiapi.com/v1",
                "model": "deepseek-r1"
            },
            "4": {
                "name": "Claude ‰∏≠ËΩ¨",
                "api_type": "proxy", 
                "base_url": "https://www.chataiapi.com/v1",
                "model": "claude-3-5-sonnet-20240620"
            },
            "5": {
                "name": "GPT-4o ‰∏≠ËΩ¨",
                "api_type": "proxy",
                "base_url": "https://www.chataiapi.com/v1",
                "model": "gpt-4o"
            }
        }

        print("Êé®ËçêÁöÑAIÊ®°Âûã:")
        for key, config in providers.items():
            print(f"{key}. {config['name']}")

        print("0. Ë∑≥ËøáAIÈÖçÁΩÆ")

        choice = input("\nËØ∑ÈÄâÊã© (0-5): ").strip()

        if choice == '0':
            config = {'enabled': False}
            self.save_ai_config(config)
            self.ai_config = config
            return True

        if choice not in providers:
            print("‚ùå Êó†ÊïàÈÄâÊã©")
            return False

        selected = providers[choice]
        api_key = input(f"\nËæìÂÖ• {selected['name']} ÁöÑAPIÂØÜÈí•: ").strip()

        if not api_key:
            print("‚ùå APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫")
            return False

        # ÊûÑÂª∫ÈÖçÁΩÆ
        config = {
            'enabled': True,
            'api_type': selected['api_type'],
            'api_key': api_key,
            'model': selected['model']
        }

        if selected['api_type'] == 'proxy':
            config['base_url'] = selected['base_url']

        # ÊµãËØïËøûÊé•
        if self.test_ai_connection(config):
            self.save_ai_config(config)
            self.ai_config = config
            print(f"‚úÖ AIÈÖçÁΩÆÊàêÂäüÔºÅ")
            return True
        else:
            print("‚ùå ËøûÊé•ÊµãËØïÂ§±Ë¥•")
            return False

    def test_ai_connection(self, config: Dict) -> bool:
        """ÊµãËØïAIËøûÊé•"""
        print("üîç ÊµãËØïAPIËøûÊé•...")

        try:
            if config['api_type'] == 'official':
                if 'gemini' in config['model']:
                    return self.test_gemini_official(config)
                else:
                    return self.test_deepseek_official(config)
            else:
                return self.test_proxy_api(config)
        except Exception as e:
            print(f"‚ùå ËøûÊé•ÊµãËØïÂºÇÂ∏∏: {e}")
            return False

    def test_gemini_official(self, config: Dict) -> bool:
        """ÊµãËØïGeminiÂÆòÊñπAPI"""
        try:
            from google import genai
            client = genai.Client(api_key=config['api_key'])
            response = client.models.generate_content(
                model=config['model'],
                contents="hello"
            )
            print("‚úÖ GeminiÂÆòÊñπAPIËøûÊé•ÊàêÂäü")
            return True
        except ImportError:
            print("‚ùå ÈúÄË¶ÅÂÆâË£Ö: pip install google-genai")
            return False
        except Exception as e:
            print(f"‚ùå GeminiÊµãËØïÂ§±Ë¥•: {e}")
            return False

    def test_deepseek_official(self, config: Dict) -> bool:
        """ÊµãËØïDeepSeekÂÆòÊñπAPI"""
        try:
            from openai import OpenAI
            client = OpenAI(
                api_key=config['api_key'],
                base_url="https://api.deepseek.com/v1"
            )
            completion = client.chat.completions.create(
                model=config['model'],
                messages=[{'role': 'user', 'content': 'hello'}],
                max_tokens=10
            )
            print("‚úÖ DeepSeekÂÆòÊñπAPIËøûÊé•ÊàêÂäü")
            return True
        except Exception as e:
            print(f"‚ùå DeepSeekÊµãËØïÂ§±Ë¥•: {e}")
            return False

    def test_proxy_api(self, config: Dict) -> bool:
        """ÊµãËØï‰∏≠ËΩ¨API"""
        try:
            from openai import OpenAI
            client = OpenAI(
                api_key=config['api_key'],
                base_url=config['base_url']
            )
            completion = client.chat.completions.create(
                model=config['model'],
                messages=[{'role': 'user', 'content': 'hello'}],
                max_tokens=10
            )
            print("‚úÖ ‰∏≠ËΩ¨APIËøûÊé•ÊàêÂäü")
            return True
        except Exception as e:
            print(f"‚ùå ‰∏≠ËΩ¨APIÊµãËØïÂ§±Ë¥•: {e}")
            return False

    def call_ai_api(self, prompt: str, system_prompt: str = "") -> Optional[str]:
        """Ë∞ÉÁî®AI API"""
        if not self.ai_config.get('enabled'):
            return None

        try:
            if self.ai_config['api_type'] == 'official':
                if 'gemini' in self.ai_config['model']:
                    return self.call_gemini_official(prompt, system_prompt)
                else:
                    return self.call_deepseek_official(prompt, system_prompt)
            else:
                return self.call_proxy_api(prompt, system_prompt)
        except Exception as e:
            print(f"‚ö†Ô∏è AI APIË∞ÉÁî®Â§±Ë¥•: {e}")
            return None

    def call_gemini_official(self, prompt: str, system_prompt: str = "") -> Optional[str]:
        """Ë∞ÉÁî®GeminiÂÆòÊñπAPI"""
        try:
            from google import genai
            client = genai.Client(api_key=self.ai_config['api_key'])
            full_prompt = f"{system_prompt}\n\n{prompt}" if system_prompt else prompt
            response = client.models.generate_content(
                model=self.ai_config['model'],
                contents=full_prompt
            )
            return response.text
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini APIÂ§±Ë¥•: {e}")
            return None

    def call_deepseek_official(self, prompt: str, system_prompt: str = "") -> Optional[str]:
        """Ë∞ÉÁî®DeepSeekÂÆòÊñπAPI"""
        try:
            from openai import OpenAI
            client = OpenAI(
                api_key=self.ai_config['api_key'],
                base_url="https://api.deepseek.com/v1"
            )
            messages = []
            if system_prompt:
                messages.append({'role': 'system', 'content': system_prompt})
            messages.append({'role': 'user', 'content': prompt})

            completion = client.chat.completions.create(
                model=self.ai_config['model'],
                messages=messages,
                max_tokens=4000,
                temperature=0.7
            )
            return completion.choices[0].message.content
        except Exception as e:
            print(f"‚ö†Ô∏è DeepSeek APIÂ§±Ë¥•: {e}")
            return None

    def call_proxy_api(self, prompt: str, system_prompt: str = "") -> Optional[str]:
        """Ë∞ÉÁî®‰∏≠ËΩ¨API"""
        try:
            from openai import OpenAI
            client = OpenAI(
                api_key=self.ai_config['api_key'],
                base_url=self.ai_config['base_url']
            )
            messages = []
            if system_prompt:
                messages.append({'role': 'system', 'content': system_prompt})
            messages.append({'role': 'user', 'content': prompt})

            completion = client.chat.completions.create(
                model=self.ai_config['model'],
                messages=messages,
                max_tokens=4000,
                temperature=0.7
            )
            return completion.choices[0].message.content
        except Exception as e:
            print(f"‚ö†Ô∏è ‰∏≠ËΩ¨APIÂ§±Ë¥•: {e}")
            return None

    def parse_subtitle_file(self, filepath: str) -> List[Dict]:
        """Ëß£ÊûêÂ≠óÂπïÊñá‰ª∂"""
        print(f"üìñ Ëß£ÊûêÂ≠óÂπï: {os.path.basename(filepath)}")

        # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
        content = None
        for encoding in ['utf-8', 'gbk', 'utf-16']:
            try:
                with open(filepath, 'r', encoding=encoding, errors='ignore') as f:
                    content = f.read()
                    break
            except:
                continue

        if not content:
            return []

        # Ëß£ÊûêÂ≠óÂπïÊù°ÁõÆ
        subtitles = []
        blocks = re.split(r'\n\s*\n', content.strip())

        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) >= 3:
                try:
                    index = int(lines[0]) if lines[0].isdigit() else len(subtitles) + 1
                    time_pattern = r'(\d{2}:\d{2}:\d{2}[,\.]\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}[,\.]\d{3})'
                    time_match = re.search(time_pattern, lines[1])

                    if time_match:
                        start_time = time_match.group(1).replace('.', ',')
                        end_time = time_match.group(2).replace('.', ',')
                        text = '\n'.join(lines[2:]).strip()

                        if text:
                            subtitles.append({
                                'index': index,
                                'start': start_time,
                                'end': end_time,
                                'text': text
                            })
                except:
                    continue

        print(f"‚úÖ Ëß£ÊûêÂÆåÊàê: {len(subtitles)} Êù°Â≠óÂπï")
        return subtitles

    def analyze_episode_with_ai(self, subtitles: List[Dict], filename: str) -> Optional[Dict]:
        """AIÂàÜÊûêÂçïÈõÜ"""
        if not self.ai_config.get('enabled'):
            print("‚è∏Ô∏è AIÊú™ÂêØÁî®ÔºåË∑≥ËøáÊô∫ËÉΩÂàÜÊûê")
            return None

        # Ê£ÄÊü•ÁºìÂ≠ò
        cache_key = self.get_analysis_cache_key(subtitles)
        cached_analysis = self.load_analysis_cache(cache_key, filename)
        if cached_analysis:
            return cached_analysis

        episode_num = self.extract_episode_number(filename)

        # ÊûÑÂª∫ÂàÜÊûêÂÜÖÂÆπÔºàÂèñÂâç80%ÈÅøÂÖçÂâßÈÄèÔºâ
        sample_size = int(len(subtitles) * 0.8)
        context_parts = []
        for i in range(0, sample_size, 50):
            segment = subtitles[i:i+50]
            segment_text = ' '.join([sub['text'] for sub in segment])
            context_parts.append(segment_text)
        full_context = '\n\n'.join(context_parts)

        print(f"ü§ñ AIÂàÜÊûêÁ¨¨{episode_num}ÈõÜ...")

        prompt = f"""# ÁîµËßÜÂâßÊô∫ËÉΩÂàÜÊûê‰∏éÁ≤æÂΩ©Ââ™Ëæë

ËØ∑‰∏∫ **Á¨¨{episode_num}ÈõÜ** ËøõË°åÊô∫ËÉΩÂàÜÊûê„ÄÇ

## ÂΩìÂâçÈõÜÂÜÖÂÆπ
```
{full_context}
```

## ÂàÜÊûêË¶ÅÊ±Ç
1. Êô∫ËÉΩËØÜÂà´3-5‰∏™ÊúÄÁ≤æÂΩ©ÁöÑÁâáÊÆµ
2. ÊØè‰∏™ÁâáÊÆµ2-3ÂàÜÈíüÔºåÂåÖÂê´ÂÆåÊï¥ÂØπËØù
3. Á°Æ‰øùÁâáÊÆµÈó¥ÈÄªËæëËøûË¥Ø
4. ÁîüÊàê‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËæìÂá∫Ôºö

```json
{{
    "episode_analysis": {{
        "episode_number": "{episode_num}",
        "genre_type": "ÂâßÊÉÖÁ±ªÂûã",
        "main_theme": "Êú¨ÈõÜÊ†∏ÂøÉ‰∏ªÈ¢ò"
    }},
    "highlight_segments": [
        {{
            "segment_id": 1,
            "title": "Á≤æÂΩ©Ê†áÈ¢ò",
            "start_time": "00:XX:XX,XXX",
            "end_time": "00:XX:XX,XXX",
            "duration_seconds": 180,
            "plot_significance": "ÂâßÊÉÖÈáçË¶ÅÊÑè‰πâ",
            "professional_narration": "ÂÆåÊï¥ÁöÑ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥Á®ø"
        }}
    ]
}}
```"""

        system_prompt = "‰Ω†ÊòØ‰∏ì‰∏öÁöÑÂΩ±ËßÜÂÜÖÂÆπÂàÜÊûê‰∏ìÂÆ∂Ôºå‰∏ìÈïøÁîµËßÜÂâßÊÉÖÊ∑±Â∫¶Ëß£ÊûÑ‰∏éÂèô‰∫ãÂàÜÊûê„ÄÇ"

        try:
            response = self.call_ai_api(prompt, system_prompt)
            if response:
                parsed_result = self.parse_ai_response(response)
                if parsed_result:
                    print(f"‚úÖ AIÂàÜÊûêÊàêÂäüÔºö{len(parsed_result.get('highlight_segments', []))} ‰∏™ÁâáÊÆµ")
                    self.save_analysis_cache(cache_key, filename, parsed_result)
                    return parsed_result
        except Exception as e:
            print(f"‚ö†Ô∏è AIÂàÜÊûêÂ§±Ë¥•: {e}")

        return None

    def parse_ai_response(self, response: str) -> Optional[Dict]:
        """Ëß£ÊûêAIÂìçÂ∫î"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.find("```", start)
                json_text = response[start:end]
            else:
                start = response.find("{")
                end = response.rfind("}") + 1
                json_text = response[start:end]

            result = json.loads(json_text)

            if 'highlight_segments' in result and 'episode_analysis' in result:
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è JSONËß£ÊûêÂ§±Ë¥•: {e}")
        return None

    def extract_episode_number(self, filename: str) -> str:
        """‰ªéÊñá‰ª∂ÂêçÊèêÂèñÈõÜÊï∞Ôºå‰ΩøÁî®Â≠óÁ¨¶‰∏≤ÊéíÂ∫è"""
        base_name = os.path.splitext(filename)[0]
        return base_name

    def get_analysis_cache_key(self, subtitles: List[Dict]) -> str:
        """ÁîüÊàêÂàÜÊûêÁºìÂ≠òÈîÆ"""
        content = json.dumps(subtitles, ensure_ascii=False, sort_keys=True)
        return hashlib.md5(content.encode()).hexdigest()[:16]

    def load_analysis_cache(self, cache_key: str, filename: str) -> Optional[Dict]:
        """Âä†ËΩΩÂàÜÊûêÁºìÂ≠ò"""
        cache_file = os.path.join(self.cache_folder, f"{filename}_{cache_key}.json")
        if os.path.exists(cache_file):
            try:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    analysis = json.load(f)
                    print(f"üíæ ‰ΩøÁî®ÁºìÂ≠òÂàÜÊûê: {filename}")
                    return analysis
            except Exception as e:
                print(f"‚ö†Ô∏è ÁºìÂ≠òËØªÂèñÂ§±Ë¥•: {e}")
        return None

    def save_analysis_cache(self, cache_key: str, filename: str, analysis: Dict):
        """‰øùÂ≠òÂàÜÊûêÁºìÂ≠ò"""
        cache_file = os.path.join(self.cache_folder, f"{filename}_{cache_key}.json")
        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(analysis, f, ensure_ascii=False, indent=2)
            print(f"üíæ ‰øùÂ≠òÂàÜÊûêÁºìÂ≠ò: {filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è ÁºìÂ≠ò‰øùÂ≠òÂ§±Ë¥•: {e}")

    def find_matching_video(self, subtitle_filename: str) -> Optional[str]:
        """Êô∫ËÉΩÂåπÈÖçËßÜÈ¢ëÊñá‰ª∂"""
        base_name = os.path.splitext(subtitle_filename)[0]

        # Á≤æÁ°ÆÂåπÈÖç
        video_extensions = ['.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv']
        for ext in video_extensions:
            video_path = os.path.join(self.video_folder, base_name + ext)
            if os.path.exists(video_path):
                return video_path

        # Ê®°Á≥äÂåπÈÖç
        for filename in os.listdir(self.video_folder):
            if any(filename.lower().endswith(ext) for ext in video_extensions):
                if base_name.lower() in filename.lower():
                    return os.path.join(self.video_folder, filename)

        return None

    def time_to_seconds(self, time_str: str) -> float:
        """Êó∂Èó¥ËΩ¨Êç¢‰∏∫Áßí"""
        try:
            time_str = time_str.replace('.', ',')
            h, m, s_ms = time_str.split(':')
            s, ms = s_ms.split(',')
            return int(h) * 3600 + int(m) * 60 + int(s) + int(ms) / 1000
        except:
            return 0.0

    def check_ffmpeg(self) -> bool:
        """Ê£ÄÊü•FFmpegÊòØÂê¶ÂèØÁî®"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False

    def create_video_clips(self, analysis: Dict, video_file: str, subtitle_filename: str) -> List[str]:
        """ÂàõÂª∫ËßÜÈ¢ëÁâáÊÆµ"""
        created_clips = []

        if not self.check_ffmpeg():
            print("‚ùå Êú™ÊâæÂà∞FFmpegÔºåÊó†Ê≥ïÂâ™ËæëËßÜÈ¢ë")
            return []

        for segment in analysis.get('highlight_segments', []):
            segment_id = segment['segment_id']
            title = segment['title']

            # ÁîüÊàêÂÆâÂÖ®ÁöÑÊñá‰ª∂Âêç
            safe_title = re.sub(r'[^\w\u4e00-\u9fff\-_]', '_', title)
            clip_filename = f"{safe_title}_seg{segment_id}.mp4"
            clip_path = os.path.join(self.output_folder, clip_filename)

            # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
            if os.path.exists(clip_path) and os.path.getsize(clip_path) > 0:
                print(f"‚úÖ ÁâáÊÆµÂ∑≤Â≠òÂú®: {clip_filename}")
                created_clips.append(clip_path)
                continue

            # Ââ™ËæëËßÜÈ¢ë
            if self.create_single_clip(video_file, segment, clip_path):
                created_clips.append(clip_path)
                # ÁîüÊàêÊóÅÁôΩÊñá‰ª∂
                self.create_narration_file(clip_path, segment)

        return created_clips

    def create_single_clip(self, video_file: str, segment: Dict, output_path: str) -> bool:
        """ÂàõÂª∫Âçï‰∏™ËßÜÈ¢ëÁâáÊÆµ"""
        try:
            start_time = segment['start_time']
            end_time = segment['end_time']

            print(f"üé¨ Ââ™ËæëÁâáÊÆµ: {os.path.basename(output_path)}")
            print(f"   Êó∂Èó¥: {start_time} --> {end_time}")

            # Êó∂Èó¥ËΩ¨Êç¢
            start_seconds = self.time_to_seconds(start_time)
            end_seconds = self.time_to_seconds(end_time)
            duration = end_seconds - start_seconds

            if duration <= 0:
                print(f"   ‚ùå Êó†ÊïàÊó∂Èó¥ÊÆµ")
                return False

            # Ê∑ªÂä†ÁºìÂÜ≤Á°Æ‰øùÂØπËØùÂÆåÊï¥
            buffer_start = max(0, start_seconds - 3)
            buffer_duration = duration + 6

            # FFmpegÂëΩ‰ª§
            cmd = [
                'ffmpeg',
                '-i', video_file,
                '-ss', str(buffer_start),
                '-t', str(buffer_duration),
                '-c:v', 'libx264',
                '-c:a', 'aac',
                '-preset', 'medium',
                '-crf', '23',
                '-movflags', '+faststart',
                '-avoid_negative_ts', 'make_zero',
                output_path,
                '-y'
            ]

            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

            if result.returncode == 0 and os.path.exists(output_path):
                file_size = os.path.getsize(output_path) / (1024*1024)
                print(f"   ‚úÖ ÊàêÂäü: {file_size:.1f}MB")
                return True
            else:
                print(f"   ‚ùå Â§±Ë¥•: {result.stderr[:100] if result.stderr else 'Êú™Áü•ÈîôËØØ'}")
                return False

        except Exception as e:
            print(f"   ‚ùå Ââ™ËæëÂºÇÂ∏∏: {e}")
            return False

    def create_narration_file(self, video_path: str, segment: Dict):
        """ÂàõÂª∫‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥Êñá‰ª∂"""
        try:
            narration_path = video_path.replace('.mp4', '_ÊóÅÁôΩËß£ËØ¥.txt')

            content = f"""üì∫ {segment['title']} - ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥
{"=" * 60}

üé¨ ÁâáÊÆµ‰ø°ÊÅØ:
‚Ä¢ Ê†áÈ¢ò: {segment['title']}
‚Ä¢ Êó∂Èïø: {segment.get('duration_seconds', 0)} Áßí
‚Ä¢ ÂâßÊÉÖÊÑè‰πâ: {segment.get('plot_significance', 'ÂÖ≥ÈîÆÂâßÊÉÖËäÇÁÇπ')}

üéôÔ∏è ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥Á®ø:
{segment.get('professional_narration', 'Á≤æÂΩ©ÂâßÊÉÖÁâáÊÆµ')}

ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

            with open(narration_path, 'w', encoding='utf-8') as f:
                f.write(content)

            print(f"   üìú ÁîüÊàêÊóÅÁôΩËß£ËØ¥: {os.path.basename(narration_path)}")

        except Exception as e:
            print(f"   ‚ö†Ô∏è ÊóÅÁôΩÊñá‰ª∂ÁîüÊàêÂ§±Ë¥•: {e}")

    def process_single_episode(self, subtitle_file: str) -> Optional[bool]:
        """Â§ÑÁêÜÂçïÈõÜÂÆåÊï¥ÊµÅÁ®ã"""
        print(f"\nüì∫ Â§ÑÁêÜ: {subtitle_file}")

        # 1. Ëß£ÊûêÂ≠óÂπï
        subtitle_path = os.path.join(self.srt_folder, subtitle_file)
        subtitles = self.parse_subtitle_file(subtitle_path)

        if not subtitles:
            print(f"‚ùå Â≠óÂπïËß£ÊûêÂ§±Ë¥•")
            return False

        # 2. AIÂàÜÊûê
        analysis = self.analyze_episode_with_ai(subtitles, subtitle_file)
        if analysis is None:
            print(f"‚è∏Ô∏è AI‰∏çÂèØÁî®Ôºå{subtitle_file} Â∑≤Ë∑≥Ëøá")
            return None
        elif not analysis:
            print(f"‚ùå AIÂàÜÊûêÂ§±Ë¥•ÔºåË∑≥ËøáÊ≠§ÈõÜ")
            return False

        # 3. ÊâæÂà∞ËßÜÈ¢ëÊñá‰ª∂
        video_file = self.find_matching_video(subtitle_file)
        if not video_file:
            print(f"‚ùå Êú™ÊâæÂà∞ËßÜÈ¢ëÊñá‰ª∂")
            return False

        print(f"üìÅ ËßÜÈ¢ëÊñá‰ª∂: {os.path.basename(video_file)}")

        # 4. ÂàõÂª∫ËßÜÈ¢ëÁâáÊÆµ
        created_clips = self.create_video_clips(analysis, video_file, subtitle_file)

        clips_count = len(created_clips)
        print(f"‚úÖ {subtitle_file} Â§ÑÁêÜÂÆåÊàê: {clips_count} ‰∏™Áü≠ËßÜÈ¢ë")

        return clips_count > 0

    def process_all_episodes(self):
        """Â§ÑÁêÜÊâÄÊúâÈõÜÊï∞ - ‰∏ªÊµÅÁ®ã"""
        print("\nüöÄ ÂºÄÂßãÊô∫ËÉΩÂâ™ËæëÂ§ÑÁêÜ")
        print("=" * 50)

        # Ê£ÄÊü•Â≠óÂπïÊñá‰ª∂
        subtitle_files = [f for f in os.listdir(self.srt_folder) 
                         if f.endswith(('.srt', '.txt')) and not f.startswith('.')]

        if not subtitle_files:
            print(f"‚ùå {self.srt_folder}/ ÁõÆÂΩï‰∏≠Êú™ÊâæÂà∞Â≠óÂπïÊñá‰ª∂")
            return

        # ÊåâÂ≠óÁ¨¶‰∏≤ÊéíÂ∫èÔºàÂç≥ÊåâÊñá‰ª∂ÂêçÊéíÂ∫èÔºâ
        subtitle_files.sort()

        print(f"üìù ÊâæÂà∞ {len(subtitle_files)} ‰∏™Â≠óÂπïÊñá‰ª∂")

        # Â§ÑÁêÜÊØè‰∏ÄÈõÜ
        total_success = 0
        total_clips = 0
        total_skipped = 0

        for subtitle_file in subtitle_files:
            try:
                success = self.process_single_episode(subtitle_file)
                if success:
                    total_success += 1
                elif success is None:
                    total_skipped += 1

                # ÁªüËÆ°ÁâáÊÆµÊï∞
                episode_clips = [f for f in os.listdir(self.output_folder) 
                               if f.endswith('.mp4')]
                total_clips = len(episode_clips)

            except Exception as e:
                print(f"‚ùå Â§ÑÁêÜ {subtitle_file} Âá∫Èîô: {e}")

        # ÊúÄÁªàÊä•Âëä
        print(f"\nüìä Â§ÑÁêÜÂÆåÊàê:")
        print(f"‚úÖ ÊàêÂäüÂ§ÑÁêÜ: {total_success}/{len(subtitle_files)} ÈõÜ")
        print(f"üé¨ ÁîüÊàêÁâáÊÆµ: {total_clips} ‰∏™")
        print(f"‚è∏Ô∏è Ë∑≥ËøáÈõÜÊï∞: {total_skipped} ÈõÜ")

    def install_dependencies(self):
        """ÂÆâË£ÖÂøÖË¶Å‰æùËµñ"""
        print("üîß Ê£ÄÊü•Âπ∂ÂÆâË£ÖÂøÖË¶Å‰æùËµñ...")

        dependencies = ['openai', 'google-genai']

        for package in dependencies:
            try:
                __import__(package.replace('-', '_'))
                print(f"‚úÖ {package} Â∑≤ÂÆâË£Ö")
            except ImportError:
                print(f"üì¶ ÂÆâË£Ö {package}...")
                try:
                    subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                    print(f"‚úÖ {package} ÂÆâË£ÖÊàêÂäü")
                except Exception as e:
                    print(f"‚ùå {package} ÂÆâË£ÖÂ§±Ë¥•: {e}")

    def clear_cache(self):
        """Ê∏ÖÁ©∫ÂàÜÊûêÁºìÂ≠ò"""
        import shutil
        if os.path.exists(self.cache_folder):
            shutil.rmtree(self.cache_folder)
            os.makedirs(self.cache_folder)
            print(f"‚úÖ Â∑≤Ê∏ÖÁ©∫ÂàÜÊûêÁºìÂ≠ò")
        else:
            print(f"üìù ÁºìÂ≠òÁõÆÂΩï‰∏çÂ≠òÂú®")

    def show_file_status(self):
        """ÊòæÁ§∫Êñá‰ª∂Áä∂ÊÄÅ"""
        srt_files = [f for f in os.listdir(self.srt_folder) if f.endswith(('.srt', '.txt'))]
        video_files = [f for f in os.listdir(self.video_folder) if f.endswith(('.mp4', '.mkv', '.avi'))]
        output_files = [f for f in os.listdir(self.output_folder) if f.endswith('.mp4')]

        print(f"\nüìä Êñá‰ª∂Áä∂ÊÄÅ:")
        print(f"üìù Â≠óÂπïÊñá‰ª∂: {len(srt_files)} ‰∏™")
        if srt_files:
            for f in srt_files[:5]:
                print(f"   ‚Ä¢ {f}")
            if len(srt_files) > 5:
                print(f"   ‚Ä¢ ... ËøòÊúâ {len(srt_files)-5} ‰∏™Êñá‰ª∂")

        print(f"üé¨ ËßÜÈ¢ëÊñá‰ª∂: {len(video_files)} ‰∏™")
        if video_files:
            for f in video_files[:5]:
                print(f"   ‚Ä¢ {f}")
            if len(video_files) > 5:
                print(f"   ‚Ä¢ ... ËøòÊúâ {len(video_files)-5} ‰∏™Êñá‰ª∂")

        print(f"üì§ ËæìÂá∫ËßÜÈ¢ë: {len(output_files)} ‰∏™")

    def show_main_menu(self):
        """‰∏ªËèúÂçï"""
        while True:
            print("\n" + "=" * 50)
            print("üé¨ ÁîµËßÜÂâßÊô∫ËÉΩÂâ™ËæëÁ≥ªÁªü")
            print("=" * 50)

            # ÊòæÁ§∫Áä∂ÊÄÅ
            ai_status = "ü§ñ Â∑≤ÈÖçÁΩÆ" if self.ai_config.get('enabled') else "‚ùå Êú™ÈÖçÁΩÆ"
            print(f"AIÁä∂ÊÄÅ: {ai_status}")

            print("\nüéØ ‰∏ªË¶ÅÂäüËÉΩ:")
            print("1. ü§ñ ÈÖçÁΩÆAIÊé•Âè£")
            print("2. üé¨ ÂºÄÂßãÊô∫ËÉΩÂâ™Ëæë")
            print("3. üìÅ Êü•ÁúãÊñá‰ª∂Áä∂ÊÄÅ")
            print("4. üîß ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ")
            print("5. üîÑ Ê∏ÖÁ©∫ÂàÜÊûêÁºìÂ≠ò")
            print("0. ‚ùå ÈÄÄÂá∫Á≥ªÁªü")

            try:
                choice = input("\nËØ∑ÈÄâÊã©Êìç‰Ωú (0-5): ").strip()

                if choice == '1':
                    self.configure_ai_interactive()
                elif choice == '2':
                    self.process_all_episodes()
                elif choice == '3':
                    self.show_file_status()
                elif choice == '4':
                    self.install_dependencies()
                elif choice == '5':
                    self.clear_cache()
                elif choice == '0':
                    print("\nüëã ÊÑüË∞¢‰ΩøÁî®ÁîµËßÜÂâßÊô∫ËÉΩÂâ™ËæëÁ≥ªÁªüÔºÅ")
                    break
                else:
                    print("‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ•0-5")

            except KeyboardInterrupt:
                print("\n\nüëã Áî®Êà∑‰∏≠Êñ≠")
                break
            except Exception as e:
                print(f"‚ùå Êìç‰ΩúÈîôËØØ: {e}")

def main():
    """‰∏ªÂáΩÊï∞"""
    try:
        system = TVClipperSystem()

        print("\nüéâ Ê¨¢Ëøé‰ΩøÁî®ÁîµËßÜÂâßÊô∫ËÉΩÂâ™ËæëÁ≥ªÁªüÔºÅ")
        print("üí° ÂäüËÉΩÁâπÁÇπÔºö")
        print("   ‚Ä¢ ÂÆòÊñπAPIÂíå‰∏≠ËΩ¨APIÊîØÊåÅ")
        print("   ‚Ä¢ Êô∫ËÉΩÂàÜÊûêÂâßÊÉÖÂÜÖÂÆπ")
        print("   ‚Ä¢ Ëá™Âä®Ââ™ËæëÁ≤æÂΩ©ÁâáÊÆµ")
        print("   ‚Ä¢ ÁîüÊàê‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥")

        system.show_main_menu()

    except KeyboardInterrupt:
        print("\n\nüëã Á®ãÂ∫èË¢´Áî®Êà∑‰∏≠Êñ≠")
    except Exception as e:
        print(f"‚ùå Á≥ªÁªüÈîôËØØ: {e}")

if __name__ == "__main__":
    main()