#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Êô∫ËÉΩAIÁîµËßÜÂâßÂâ™ËæëÁ≥ªÁªü - ‰∏ªÁ®ãÂ∫è
ÂÆåÊï¥Ëß£ÂÜ≥ÊñπÊ°àÔºöÊô∫ËÉΩÂàÜÊûê„ÄÅËá™Âä®Ââ™Ëæë„ÄÅÊóÅÁôΩÁîüÊàê
"""

import os
import re
import json
import hashlib
import subprocess
import sys
from typing import List, Dict, Optional
from datetime import datetime
from ai_analyzer import AIAnalyzer

class IntelligentTVClipper:
    """Êô∫ËÉΩÁîµËßÜÂâßÂâ™ËæëÁ≥ªÁªü"""

    def __init__(self):
        # Ê†áÂáÜÁõÆÂΩïÁªìÊûÑ
        self.srt_folder = "srt"
        self.video_folder = "videos"
        self.output_folder = "clips"
        self.cache_folder = "analysis_cache"

        # ÂàõÂª∫ÁõÆÂΩï
        for folder in [self.srt_folder, self.video_folder, self.output_folder, self.cache_folder]:
            os.makedirs(folder, exist_ok=True)

        # Âä†ËΩΩAIÈÖçÁΩÆ
        self.ai_config = self.load_ai_config()

        print("üöÄ Êô∫ËÉΩAIÁîµËßÜÂâßÂâ™ËæëÁ≥ªÁªüÂ∑≤ÂàùÂßãÂåñ")
        print(f"üìÅ Â≠óÂπïÁõÆÂΩï: {self.srt_folder}/")
        print(f"üé¨ ËßÜÈ¢ëÁõÆÂΩï: {self.video_folder}/")
        print(f"üì§ ËæìÂá∫ÁõÆÂΩï: {self.output_folder}/")

    def load_ai_config(self) -> Dict:
        """Âä†ËΩΩAIÈÖçÁΩÆ"""
        try:
            if os.path.exists('.ai_config.json'):
                with open('.ai_config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    if config.get('enabled', False):
                        provider = config.get('provider', 'unknown')
                        print(f"ü§ñ AIÂàÜÊûêÂ∑≤ÂêØÁî®: {provider}")
                        return config
        except Exception as e:
            print(f"‚ö†Ô∏è AIÈÖçÁΩÆÂä†ËΩΩÂ§±Ë¥•: {e}")

        print("üìù AIÂàÜÊûêÊú™ÂêØÁî®Ôºå‰ΩøÁî®Âü∫Á°ÄËßÑÂàôÂàÜÊûê")
        return {'enabled': False}

    def configure_ai_interactive(self):
        """‰∫§‰∫íÂºèAIÈÖçÁΩÆ"""
        print("\nü§ñ AIÊé•Âè£ÈÖçÁΩÆ")
        print("=" * 50)

        print("üìù Êé®ËçêÁöÑAIÊ®°ÂûãÈÖçÁΩÆ:")
        print("1. OpenAI GPT-4 (‰∏≠ËΩ¨API)")
        print("2. Claude 3.5 Sonnet (‰∏≠ËΩ¨API)")
        print("3. DeepSeek R1 (‰∏≠ËΩ¨API)")
        print("4. Gemini Pro (ÂÆòÊñπAPI)")
        print("5. Ëá™ÂÆö‰πâÈÖçÁΩÆ")
        print("0. ËøîÂõû‰∏ªËèúÂçï")

        choice = input("\nËØ∑ÈÄâÊã©ÈÖçÁΩÆ (0-5): ").strip()

        if choice == '0':
            return
        elif choice == '1':
            self.setup_gpt4_config()
        elif choice == '2':
            self.setup_claude_config()
        elif choice == '3':
            self.setup_deepseek_config()
        elif choice == '4':
            self.setup_gemini_config()
        elif choice == '5':
            self.custom_ai_config()
        else:
            print("‚ùå Êó†ÊïàÈÄâÊã©")

    def setup_gpt4_config(self):
        """ÈÖçÁΩÆGPT-4"""
        print("\nüöÄ ÈÖçÁΩÆGPT-4")
        print("Êé®Ëçê‰ΩøÁî®‰∏≠ËΩ¨API: https://api.openai-proxy.com/v1")

        api_key = input("ËØ∑ËæìÂÖ•APIÂØÜÈí•: ").strip()
        if not api_key:
            print("‚ùå APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫")
            return

        base_url = input("ËØ∑ËæìÂÖ•APIÂú∞ÂùÄ (ÈªòËÆ§: https://api.openai-proxy.com/v1): ").strip()
        if not base_url:
            base_url = "https://api.openai-proxy.com/v1"

        config = {
            'enabled': True,
            'api_type': 'proxy',
            'provider': 'openai',
            'api_key': api_key,
            'base_url': base_url,
            'model': 'gpt-4'
        }

        if self.save_ai_config(config):
            self.ai_config = config
            print("‚úÖ GPT-4ÈÖçÁΩÆÊàêÂäüÔºÅ")

    def setup_claude_config(self):
        """ÈÖçÁΩÆClaude 3.5 Sonnet"""
        print("\nü§ñ ÈÖçÁΩÆClaude 3.5 Sonnet")
        print("Êé®Ëçê‰ΩøÁî®‰∏≠ËΩ¨API")

        api_key = input("ËØ∑ËæìÂÖ•APIÂØÜÈí•: ").strip()
        if not api_key:
            print("‚ùå APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫")
            return

        base_url = input("ËØ∑ËæìÂÖ•APIÂú∞ÂùÄ: ").strip()
        if not base_url:
            print("‚ùå APIÂú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫")
            return

        config = {
            'enabled': True,
            'api_type': 'proxy',
            'provider': 'claude',
            'api_key': api_key,
            'base_url': base_url,
            'model': 'claude-3-5-sonnet-20240620'
        }

        if self.save_ai_config(config):
            self.ai_config = config
            print("‚úÖ Claude 3.5 SonnetÈÖçÁΩÆÊàêÂäüÔºÅ")

    def setup_deepseek_config(self):
        """ÈÖçÁΩÆDeepSeek R1"""
        print("\nüß† ÈÖçÁΩÆDeepSeek R1")

        api_key = input("ËØ∑ËæìÂÖ•APIÂØÜÈí•: ").strip()
        if not api_key:
            print("‚ùå APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫")
            return

        base_url = input("ËØ∑ËæìÂÖ•APIÂú∞ÂùÄ: ").strip()
        if not base_url:
            print("‚ùå APIÂú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫")
            return

        config = {
            'enabled': True,
            'api_type': 'proxy',
            'provider': 'deepseek',
            'api_key': api_key,
            'base_url': base_url,
            'model': 'deepseek-r1'
        }

        if self.save_ai_config(config):
            self.ai_config = config
            print("‚úÖ DeepSeek R1ÈÖçÁΩÆÊàêÂäüÔºÅ")

    def setup_gemini_config(self):
        """ÈÖçÁΩÆGemini Pro"""
        print("\nüíé ÈÖçÁΩÆGemini Pro")
        print("‰ΩøÁî®GoogleÂÆòÊñπAPI")

        api_key = input("ËØ∑ËæìÂÖ•Google APIÂØÜÈí•: ").strip()
        if not api_key:
            print("‚ùå APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫")
            return

        config = {
            'enabled': True,
            'api_type': 'official',
            'provider': 'gemini',
            'api_key': api_key,
            'model': 'gemini-pro'
        }

        if self.save_ai_config(config):
            self.ai_config = config
            print("‚úÖ Gemini ProÈÖçÁΩÆÊàêÂäüÔºÅ")

    def custom_ai_config(self):
        """Ëá™ÂÆö‰πâAIÈÖçÁΩÆ"""
        print("\n‚öôÔ∏è Ëá™ÂÆö‰πâAIÈÖçÁΩÆ")

        provider = input("ËØ∑ËæìÂÖ•Êèê‰æõÂïÜÂêçÁß∞ (Â¶Ç: openai, claude): ").strip()
        api_key = input("ËØ∑ËæìÂÖ•APIÂØÜÈí•: ").strip()
        base_url = input("ËØ∑ËæìÂÖ•APIÂú∞ÂùÄ: ").strip()
        model = input("ËØ∑ËæìÂÖ•Ê®°ÂûãÂêçÁß∞: ").strip()

        if not all([provider, api_key, base_url, model]):
            print("‚ùå ÊâÄÊúâÂ≠óÊÆµÈÉΩ‰∏çËÉΩ‰∏∫Á©∫")
            return

        config = {
            'enabled': True,
            'api_type': 'proxy',
            'provider': provider,
            'api_key': api_key,
            'base_url': base_url,
            'model': model
        }

        if self.save_ai_config(config):
            self.ai_config = config
            print(f"‚úÖ Ëá™ÂÆö‰πâÈÖçÁΩÆÊàêÂäü")

    def save_ai_config(self, config: Dict) -> bool:
        """‰øùÂ≠òAIÈÖçÁΩÆ"""
        try:
            with open('.ai_config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå ÈÖçÁΩÆ‰øùÂ≠òÂ§±Ë¥•: {e}")
            return False

    def parse_subtitle_file(self, filepath: str) -> List[Dict]:
        """Ëß£ÊûêÂ≠óÂπïÊñá‰ª∂"""
        print(f"üìñ Ëß£ÊûêÂ≠óÂπï: {os.path.basename(filepath)}")

        # Â∞ùËØï‰∏çÂêåÁºñÁ†Å
        content = None
        for encoding in ['utf-8', 'gbk', 'utf-16']:
            try:
                with open(filepath, 'r', encoding=encoding, errors='ignore') as f:
                    content = f.read()
                    break
            except:
                continue

        if not content:
            print(f"‚ùå Êó†Ê≥ïËØªÂèñÊñá‰ª∂: {filepath}")
            return []

        # Ëß£ÊûêÂ≠óÂπïÊù°ÁõÆ
        subtitles = []
        blocks = re.split(r'\n\s*\n', content.strip())

        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) >= 3:
                try:
                    index = int(lines[0]) if lines[0].isdigit() else len(subtitles) + 1

                    # ÂåπÈÖçÊó∂Èó¥Ê†ºÂºè
                    time_pattern = r'(\d{2}:\d{2}:\d{2}[,\.]\d{3})\s*-->\s*(\d{2}:\d{2}:\d{2}[,\.]\d{3})'
                    time_match = re.search(time_pattern, lines[1])

                    if time_match:
                        start_time = time_match.group(1).replace('.', ',')
                        end_time = time_match.group(2).replace('.', ',')
                        text = '\n'.join(lines[2:]).strip()

                        if text:
                            subtitles.append({
                                'index': index,
                                'start': start_time,
                                'end': end_time,
                                'text': text
                            })
                except (ValueError, IndexError):
                    continue

        print(f"‚úÖ Ëß£ÊûêÂÆåÊàê: {len(subtitles)} Êù°Â≠óÂπï")
        return subtitles

    def call_ai_api(self, prompt: str, system_prompt: str = "") -> Optional[str]:
        """Áªü‰∏ÄAI APIË∞ÉÁî®"""
        if not self.ai_config.get('enabled'):
            return None

        try:
            api_type = self.ai_config.get('api_type', 'proxy')

            if api_type == 'official' and self.ai_config.get('provider') == 'gemini':
                return self.call_gemini_api(prompt, system_prompt)
            else:
                return self.call_proxy_api(prompt, system_prompt)

        except Exception as e:
            print(f"‚ö†Ô∏è APIË∞ÉÁî®Â§±Ë¥•: {e}")
            return None

    def call_gemini_api(self, prompt: str, system_prompt: str) -> Optional[str]:
        """Ë∞ÉÁî®Google Gemini API"""
        try:
            import google.generativeai as genai

            genai.configure(api_key=self.ai_config['api_key'])
            model = genai.GenerativeModel(self.ai_config.get('model', 'gemini-pro'))

            full_prompt = f"{system_prompt}\n\n{prompt}" if system_prompt else prompt
            response = model.generate_content(full_prompt)

            return response.text

        except Exception as e:
            print(f"‚ö†Ô∏è Gemini APIË∞ÉÁî®Â§±Ë¥•: {e}")
            return None

    def call_proxy_api(self, prompt: str, system_prompt: str) -> Optional[str]:
        """Ë∞ÉÁî®‰∏≠ËΩ¨API"""
        try:
            from openai import OpenAI

            client = OpenAI(
                api_key=self.ai_config['api_key'],
                base_url=self.ai_config['base_url']
            )

            messages = []
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            messages.append({"role": "user", "content": prompt})

            response = client.chat.completions.create(
                model=self.ai_config['model'],
                messages=messages,
                max_tokens=4000,
                temperature=0.7
            )

            return response.choices[0].message.content

        except Exception as e:
            print(f"‚ö†Ô∏è ‰∏≠ËΩ¨APIË∞ÉÁî®Â§±Ë¥•: {e}")
            return None

    def analyze_episode_with_ai(self, subtitles: List[Dict], filename: str) -> Optional[Dict]:
        """‰ΩøÁî®AIÂàÜÊûêÊï¥ÈõÜ"""
        if not self.ai_config.get('enabled'):
            print(f"‚ö†Ô∏è AIÊú™ÂêØÁî®ÔºåË∑≥Ëøá {filename}")
            return None

        # ÊûÑÂª∫ÂÆåÊï¥‰∏ä‰∏ãÊñá
        full_context = self.build_complete_context(subtitles)
        episode_num = self.extract_episode_number(filename)

        prompt = f"""‰Ω†ÊòØ‰∏ì‰∏öÁöÑÁîµËßÜÂâßÂâ™ËæëÂ∏àÔºåËØ∑ÂàÜÊûêÁ¨¨{episode_num}ÈõÜÁöÑÂÆåÊï¥ÂÜÖÂÆπ„ÄÇ

„ÄêÂÆåÊï¥ÂâßÊÉÖÂÜÖÂÆπ„Äë
{full_context}

ËØ∑ÊâæÂá∫3-5‰∏™ÊúÄÁ≤æÂΩ©ÁöÑÁâáÊÆµÂà∂‰ΩúÁü≠ËßÜÈ¢ëÔºåÊØè‰∏™ÁâáÊÆµ2-3ÂàÜÈíü„ÄÇ

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËæìÂá∫Ôºö

```json
{{
    "episode_analysis": {{
        "episode_number": "{episode_num}",
        "genre_type": "ÂâßÊÉÖÁ±ªÂûã",
        "main_theme": "Êú¨ÈõÜÊ†∏ÂøÉ‰∏ªÈ¢ò"
    }},
    "highlight_segments": [
        {{
            "segment_id": 1,
            "title": "Á≤æÂΩ©Ê†áÈ¢ò",
            "start_time": "00:XX:XX,XXX",
            "end_time": "00:XX:XX,XXX",
            "duration_seconds": 180,
            "plot_significance": "ÂâßÊÉÖÈáçË¶ÅÊÑè‰πâ",
            "professional_narration": "ÂÆåÊï¥ÁöÑ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥Á®ø",
            "highlight_tip": "‰∏ÄÂè•ËØùÂ≠óÂπï‰∫ÆÁÇπÊèêÁ§∫"
        }}
    ]
}}
```"""

        system_prompt = "‰Ω†ÊòØ‰∏ì‰∏öÁöÑÂΩ±ËßÜÂÜÖÂÆπÂàÜÊûê‰∏ìÂÆ∂Ôºå‰∏ìÈïøÁîµËßÜÂâßÊÉÖÊ∑±Â∫¶Ëß£ÊûÑ‰∏éÂèô‰∫ãÂàÜÊûê„ÄÇ"

        try:
            response = self.call_ai_api(prompt, system_prompt)
            if response:
                parsed_result = self.parse_ai_response(response)
                if parsed_result:
                    print(f"‚úÖ AIÂàÜÊûêÊàêÂäüÔºö{len(parsed_result.get('highlight_segments', []))} ‰∏™ÁâáÊÆµ")
                    return parsed_result
        except Exception as e:
            print(f"‚ö†Ô∏è AIÂàÜÊûêÂ§±Ë¥•: {e}")

        return None

    def build_complete_context(self, subtitles: List[Dict]) -> str:
        """ÊûÑÂª∫ÂÆåÊï¥‰∏ä‰∏ãÊñá"""
        context_segments = []
        for i in range(0, len(subtitles), 20):
            segment = subtitles[i:i+20]
            segment_text = ' '.join([f"[{sub['start']}] {sub['text']}" for sub in segment])
            context_segments.append(segment_text)

        return '\n\n'.join(context_segments)

    def parse_ai_response(self, response: str) -> Optional[Dict]:
        """Ëß£ÊûêAIÂìçÂ∫î"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.find("```", start)
                json_text = response[start:end]
            else:
                start = response.find("{")
                end = response.rfind("}") + 1
                json_text = response[start:end]

            result = json.loads(json_text)

            if 'highlight_segments' in result and 'episode_analysis' in result:
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è JSONËß£ÊûêÂ§±Ë¥•: {e}")
        return None

    def extract_episode_number(self, filename: str) -> str:
        """‰ªéÊñá‰ª∂ÂêçÊèêÂèñÈõÜÊï∞"""
        base_name = os.path.splitext(filename)[0]
        return base_name

    def find_matching_video(self, subtitle_filename: str) -> Optional[str]:
        """Êô∫ËÉΩÂåπÈÖçËßÜÈ¢ëÊñá‰ª∂"""
        base_name = os.path.splitext(subtitle_filename)[0]

        # Á≤æÁ°ÆÂåπÈÖç
        video_extensions = ['.mp4', '.mkv', '.avi', '.mov', '.wmv', '.flv']
        for ext in video_extensions:
            video_path = os.path.join(self.video_folder, base_name + ext)
            if os.path.exists(video_path):
                return video_path

        # Ê®°Á≥äÂåπÈÖç
        for filename in os.listdir(self.video_folder):
            if any(filename.lower().endswith(ext) for ext in video_extensions):
                if base_name.lower() in filename.lower():
                    return os.path.join(self.video_folder, filename)

        return None

    def time_to_seconds(self, time_str: str) -> float:
        """Êó∂Èó¥ËΩ¨Êç¢‰∏∫Áßí"""
        try:
            time_str = time_str.replace('.', ',')
            h, m, s_ms = time_str.split(':')
            s, ms = s_ms.split(',')
            return int(h) * 3600 + int(m) * 60 + int(s) + int(ms) / 1000
        except:
            return 0.0

    def check_ffmpeg(self) -> bool:
        """Ê£ÄÊü•FFmpegÊòØÂê¶ÂèØÁî®"""
        try:
            result = subprocess.run(
                ['ffmpeg', '-version'], 
                capture_output=True, 
                text=True
            )
            return result.returncode == 0
        except:
            return False

    def create_video_clips(self, analysis: Dict, video_file: str, subtitle_filename: str) -> List[str]:
        """ÂàõÂª∫ËßÜÈ¢ëÁâáÊÆµ"""
        created_clips = []

        if not self.check_ffmpeg():
            print("‚ùå Êú™ÊâæÂà∞FFmpegÔºåÊó†Ê≥ïÂâ™ËæëËßÜÈ¢ë")
            return []

        for segment in analysis.get('highlight_segments', []):
            segment_id = segment['segment_id']
            title = segment['title']

            # ÁîüÊàêÂÆâÂÖ®ÁöÑÊñá‰ª∂Âêç
            safe_title = re.sub(r'[^\w\u4e00-\u9fff\-_]', '_', title)
            clip_filename = f"{safe_title}_seg{segment_id}.mp4"
            clip_path = os.path.join(self.output_folder, clip_filename)

            # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
            if os.path.exists(clip_path) and os.path.getsize(clip_path) > 0:
                print(f"‚úÖ ÁâáÊÆµÂ∑≤Â≠òÂú®: {clip_filename}")
                created_clips.append(clip_path)
                continue

            # Ââ™ËæëËßÜÈ¢ë
            if self.create_single_clip(video_file, segment, clip_path):
                created_clips.append(clip_path)
                # ÁîüÊàêÊóÅÁôΩÊñá‰ª∂
                self.create_narration_file(clip_path, segment)
                # ÁîüÊàêSRTÂ≠óÂπï
                self.create_srt_narration(clip_path, segment)

        return created_clips

    def create_single_clip(self, video_file: str, segment: Dict, output_path: str) -> bool:
        """ÂàõÂª∫Âçï‰∏™ËßÜÈ¢ëÁâáÊÆµ"""
        try:
            start_time = segment['start_time']
            end_time = segment['end_time']

            print(f"üé¨ Ââ™ËæëÁâáÊÆµ: {os.path.basename(output_path)}")
            print(f"   Êó∂Èó¥: {start_time} --> {end_time}")

            # Êó∂Èó¥ËΩ¨Êç¢
            start_seconds = self.time_to_seconds(start_time)
            end_seconds = self.time_to_seconds(end_time)
            duration = end_seconds - start_seconds

            if duration <= 0:
                print(f"   ‚ùå Êó†ÊïàÊó∂Èó¥ÊÆµ")
                return False

            # FFmpegÂëΩ‰ª§
            cmd = [
                'ffmpeg',
                '-i', video_file,
                '-ss', str(start_seconds),
                '-t', str(duration),
                '-c:v', 'libx264',
                '-c:a', 'aac',
                '-preset', 'medium',
                '-crf', '23',
                output_path,
                '-y'
            ]

            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=300
            )

            if result.returncode == 0 and os.path.exists(output_path):
                file_size = os.path.getsize(output_path) / (1024*1024)
                print(f"   ‚úÖ ÊàêÂäü: {file_size:.1f}MB")
                return True
            else:
                error_msg = result.stderr[:100] if result.stderr else 'Êú™Áü•ÈîôËØØ'
                print(f"   ‚ùå Â§±Ë¥•: {error_msg}")
                return False

        except Exception as e:
            print(f"   ‚ùå Ââ™ËæëÂºÇÂ∏∏: {e}")
            return False

    def create_narration_file(self, video_path: str, segment: Dict):
        """ÂàõÂª∫ÊóÅÁôΩÊñá‰ª∂"""
        try:
            narration_path = video_path.replace('.mp4', '_ÊóÅÁôΩËß£ËØ¥.txt')

            content = f"""üéôÔ∏è {segment['title']} - ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥
{"=" * 60}

üé¨ ÁâáÊÆµ‰ø°ÊÅØ:
‚Ä¢ Ê†áÈ¢ò: {segment['title']}
‚Ä¢ Êó∂Èïø: {segment.get('duration_seconds', 0)} Áßí
‚Ä¢ ÈáçË¶ÅÊÄß: {segment.get('plot_significance', 'ÈáçË¶ÅÂâßÊÉÖÁâáÊÆµ')}

üéôÔ∏è ‰∏ì‰∏öÊóÅÁôΩËß£ËØ¥:
{segment.get('professional_narration', {}).get('full_script', 'ÊöÇÊó†ÊóÅÁôΩ')}

üí° ËßÇÁúãÊèêÁ§∫:
{segment.get('highlight_tip', 'Á≤æÂΩ©ÂÜÖÂÆπÂÄºÂæóÂÖ≥Ê≥®')}

üìù ÂÜÖÂÆπÊëòË¶Å:
{segment.get('content_summary', 'Á≤æÂΩ©ÂâßÊÉÖÁâáÊÆµ')}

ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

            with open(narration_path, 'w', encoding='utf-8') as f:
                f.write(content)

            print(f"   üìù ÊóÅÁôΩÊñá‰ª∂: {os.path.basename(narration_path)}")

        except Exception as e:
            print(f"   ‚ö†Ô∏è ÊóÅÁôΩÁîüÊàêÂ§±Ë¥•: {e}")

    def create_srt_narration(self, video_path: str, segment: Dict):
        """ÂàõÂª∫SRTÊ†ºÂºèÊóÅÁôΩÂ≠óÂπï"""
        try:
            srt_path = video_path.replace('.mp4', '_ÊóÅÁôΩÂ≠óÂπï.srt')

            professional_narration = segment.get('professional_narration', {})
            duration = segment.get('duration_seconds', 120)

            if self.ai_config.get('enabled'):
                analyzer = AIAnalyzer()
                srt_content = analyzer.generate_srt_narration(professional_narration, duration)
            else:
                # Âü∫Á°ÄSRTÁîüÊàê
                srt_content = f"""1
00:00:00,000 --> 00:00:05,000
{segment.get('title', 'Á≤æÂΩ©ÁâáÊÆµ')}

2
00:00:05,000 --> 00:00:{min(duration, 99):02d},000
{segment.get('highlight_tip', 'Á≤æÂΩ©ÂÜÖÂÆπÊ≠£Âú®Êí≠Êîæ')}
"""

            with open(srt_path, 'w', encoding='utf-8') as f:
                f.write(srt_content)

            print(f"   üé¨ SRTÂ≠óÂπï: {os.path.basename(srt_path)}")

        except Exception as e:
            print(f"   ‚ö†Ô∏è SRTÁîüÊàêÂ§±Ë¥•: {e}")

    def process_single_episode(self, subtitle_file: str) -> Optional[bool]:
        """Â§ÑÁêÜÂçïÈõÜÂÆåÊï¥ÊµÅÁ®ã"""
        print(f"\nüì∫ Â§ÑÁêÜ: {subtitle_file}")

        # 1. Ëß£ÊûêÂ≠óÂπï
        subtitle_path = os.path.join(self.srt_folder, subtitle_file)
        subtitles = self.parse_subtitle_file(subtitle_path)

        if not subtitles:
            print(f"‚ùå Â≠óÂπïËß£ÊûêÂ§±Ë¥•")
            return False

        # 2. AIÂàÜÊûê
        if self.ai_config.get('enabled'):
            analyzer = AIAnalyzer()
            analysis = analyzer.analyze_episode_with_fixed_format(
                subtitles,
                episode_context=f"Á¨¨{self.extract_episode_number(subtitle_file)}ÈõÜ",
                ai_config=self.ai_config
            )
            if not analysis:
                print(f"‚ùå AIÂàÜÊûêÂ§±Ë¥•ÔºåË∑≥ËøáÊ≠§ÈõÜ")
                return False
        else:
            analysis = None
            print(f"‚ö†Ô∏è AIÊú™ÂêØÁî®ÔºåË∑≥Ëøá {subtitle_file} ÁöÑAIÂàÜÊûê")

        if analysis is None:
            print(f"‚è∏Ô∏è AI‰∏çÂèØÁî®Ôºå{subtitle_file} Â∑≤Ë∑≥Ëøá")
            return None
        elif not analysis:
            print(f"‚ùå AIÂàÜÊûêÂ§±Ë¥•ÔºåË∑≥ËøáÊ≠§ÈõÜ")
            return False

        # 3. ÊâæÂà∞ËßÜÈ¢ëÊñá‰ª∂
        video_file = self.find_matching_video(subtitle_file)
        if not video_file:
            print(f"‚ùå Êú™ÊâæÂà∞ËßÜÈ¢ëÊñá‰ª∂")
            return False

        print(f"üìÅ ËßÜÈ¢ëÊñá‰ª∂: {os.path.basename(video_file)}")

        # 4. ÂàõÂª∫ËßÜÈ¢ëÁâáÊÆµ
        created_clips = self.create_video_clips(analysis, video_file, subtitle_file)

        clips_count = len(created_clips)
        print(f"‚úÖ {subtitle_file} Â§ÑÁêÜÂÆåÊàê: {clips_count} ‰∏™Áü≠ËßÜÈ¢ë")

        return clips_count > 0

    def process_all_episodes(self):
        """Â§ÑÁêÜÊâÄÊúâÈõÜÊï∞ - ‰∏ªÊµÅÁ®ã"""
        print("\nüöÄ ÂºÄÂßãÊô∫ËÉΩÂâ™ËæëÂ§ÑÁêÜ")
        print("=" * 50)

        # Ê£ÄÊü•Â≠óÂπïÊñá‰ª∂
        subtitle_files = [f for f in os.listdir(self.srt_folder) 
                         if f.endswith(('.srt', '.txt')) and not f.startswith('.')]

        if not subtitle_files:
            print(f"‚ùå {self.srt_folder}/ ÁõÆÂΩï‰∏≠Êú™ÊâæÂà∞Â≠óÂπïÊñá‰ª∂")
            return

        # ÊåâÂ≠óÁ¨¶‰∏≤ÊéíÂ∫èÔºàÂç≥ÊåâÊñá‰ª∂ÂêçÊéíÂ∫èÔºâ
        subtitle_files.sort()

        print(f"üìù ÊâæÂà∞ {len(subtitle_files)} ‰∏™Â≠óÂπïÊñá‰ª∂")

        # Â§ÑÁêÜÊØè‰∏ÄÈõÜ
        total_success = 0
        total_clips = 0
        total_skipped = 0

        for subtitle_file in subtitle_files:
            try:
                success = self.process_single_episode(subtitle_file)
                if success:
                    total_success += 1
                elif success is None:
                    total_skipped += 1

                # ÁªüËÆ°ÁâáÊÆµÊï∞
                episode_clips = [f for f in os.listdir(self.output_folder) 
                               if f.endswith('.mp4')]
                total_clips = len(episode_clips)

            except Exception as e:
                print(f"‚ùå Â§ÑÁêÜ {subtitle_file} Âá∫Èîô: {e}")

        # ÊúÄÁªàÊä•Âëä
        print(f"\nüìä Â§ÑÁêÜÂÆåÊàê:")
        print(f"‚úÖ ÊàêÂäüÂ§ÑÁêÜ: {total_success}/{len(subtitle_files)} ÈõÜ")
        print(f"üé¨ ÁîüÊàêÁâáÊÆµ: {total_clips} ‰∏™")
        print(f"‚è∏Ô∏è Ë∑≥ËøáÈõÜÊï∞: {total_skipped} ÈõÜ")

    def show_file_status(self):
        """ÊòæÁ§∫Êñá‰ª∂Áä∂ÊÄÅ"""
        srt_files = [f for f in os.listdir(self.srt_folder) if f.endswith(('.srt', '.txt'))]
        video_files = [f for f in os.listdir(self.video_folder) if f.endswith(('.mp4', '.mkv', '.avi'))]
        output_files = [f for f in os.listdir(self.output_folder) if f.endswith('.mp4')]

        print(f"\nüìä Êñá‰ª∂Áä∂ÊÄÅ:")
        print(f"üìù Â≠óÂπïÊñá‰ª∂: {len(srt_files)} ‰∏™")
        if srt_files:
            for f in srt_files[:5]:
                print(f"   ‚Ä¢ {f}")
            if len(srt_files) > 5:
                print(f"   ‚Ä¢ ... ËøòÊúâ {len(srt_files)-5} ‰∏™Êñá‰ª∂")

        print(f"üé¨ ËßÜÈ¢ëÊñá‰ª∂: {len(video_files)} ‰∏™")
        if video_files:
            for f in video_files[:5]:
                print(f"   ‚Ä¢ {f}")
            if len(video_files) > 5:
                print(f"   ‚Ä¢ ... ËøòÊúâ {len(video_files)-5} ‰∏™Êñá‰ª∂")

        print(f"üì§ ËæìÂá∫ËßÜÈ¢ë: {len(output_files)} ‰∏™")

    def show_usage_guide(self):
        """ÊòæÁ§∫‰ΩøÁî®ÊïôÁ®ã"""
        print("\nüìñ ‰ΩøÁî®ÊïôÁ®ã")
        print("=" * 50)
        print("""
üéØ Âø´ÈÄüÂºÄÂßã:
1. Â∞ÜÂ≠óÂπïÊñá‰ª∂(.srt/.txt)ÊîæÂú® srt/ ÁõÆÂΩï
2. Â∞ÜÂØπÂ∫îËßÜÈ¢ëÊñá‰ª∂(.mp4/.mkv/.avi)ÊîæÂú® videos/ ÁõÆÂΩï
3. ÈÖçÁΩÆAIÊé•Âè£ (Êé®ËçêGPT-4ÊàñClaude)
4. ËøêË°åÊô∫ËÉΩÂâ™Ëæë

üìÅ ÁõÆÂΩïÁªìÊûÑ:
È°πÁõÆÊ†πÁõÆÂΩï/
‚îú‚îÄ‚îÄ srt/              # Â≠óÂπïÁõÆÂΩï
‚îÇ   ‚îú‚îÄ‚îÄ EP01.srt
‚îÇ   ‚îî‚îÄ‚îÄ EP02.srt
‚îú‚îÄ‚îÄ videos/           # ËßÜÈ¢ëÁõÆÂΩï
‚îÇ   ‚îú‚îÄ‚îÄ EP01.mp4
‚îÇ   ‚îî‚îÄ‚îÄ EP02.mp4
‚îî‚îÄ‚îÄ clips/            # ËæìÂá∫ÁõÆÂΩï (Ëá™Âä®ÂàõÂª∫)

üí° ‰ΩøÁî®ÊäÄÂ∑ß:
‚Ä¢ Â≠óÂπïÊñá‰ª∂ÂêçÂÜ≥ÂÆöÈõÜÊï∞È°∫Â∫è (ÊåâÂ≠óÁ¨¶‰∏≤ÊéíÂ∫è)
‚Ä¢ Á°Æ‰øùËßÜÈ¢ëÂíåÂ≠óÂπïÊñá‰ª∂ÂêçÂØπÂ∫î
‚Ä¢ ÊØèÈõÜÁîüÊàê3-5‰∏™2-3ÂàÜÈíüÁöÑÁ≤æÂΩ©ÁâáÊÆµ
        """)
        input("\nÊåâÂõûËΩ¶ÈîÆËøîÂõû‰∏ªËèúÂçï...")

    def show_main_menu(self):
        """‰∏ªËèúÂçï"""
        while True:
            print("\n" + "=" * 60)
            print("üé¨ Êô∫ËÉΩÁîµËßÜÂâßÂâ™ËæëÁ≥ªÁªü")
            print("=" * 60)

            # ÊòæÁ§∫ÂΩìÂâçÁä∂ÊÄÅ
            ai_status = "ü§ñ Â∑≤ÈÖçÁΩÆ" if self.ai_config.get('enabled') else "‚ùå Êú™ÈÖçÁΩÆ"
            if self.ai_config.get('enabled'):
                model = self.ai_config.get('model', 'Êú™Áü•Ê®°Âûã')
                provider = self.ai_config.get('provider', 'Êú™Áü•')
                print(f"AIÁä∂ÊÄÅ: {ai_status} ({provider} - {model})")
            else:
                print(f"AIÁä∂ÊÄÅ: {ai_status}")

            # Ê£ÄÊü•Êñá‰ª∂Áä∂ÊÄÅ
            srt_count = len([f for f in os.listdir(self.srt_folder) if f.endswith(('.srt', '.txt'))])
            video_count = len([f for f in os.listdir(self.video_folder) if f.endswith(('.mp4', '.mkv', '.avi'))])
            clips_count = len([f for f in os.listdir(self.output_folder) if f.endswith('.mp4')])

            print(f"Êñá‰ª∂Áä∂ÊÄÅ: üìù{srt_count}‰∏™Â≠óÂπï üé¨{video_count}‰∏™ËßÜÈ¢ë üì§{clips_count}‰∏™ÁâáÊÆµ")

            print("\nüéØ ‰∏ªË¶ÅÂäüËÉΩ:")
            print("1. ü§ñ ÈÖçÁΩÆAIÊé•Âè£")
            print("2. üé¨ ÂºÄÂßãÊô∫ËÉΩÂâ™Ëæë")
            print("3. üìÅ Êü•ÁúãËØ¶ÁªÜÊñá‰ª∂Áä∂ÊÄÅ")
            print("4. üìñ Êü•Áúã‰ΩøÁî®ÊïôÁ®ã")
            print("0. ‚ùå ÈÄÄÂá∫Á≥ªÁªü")

            try:
                choice = input("\nËØ∑ÈÄâÊã©Êìç‰Ωú (0-4): ").strip()

                if choice == '1':
                    self.configure_ai_interactive()
                elif choice == '2':
                    if not self.ai_config.get('enabled'):
                        print("\n‚ö†Ô∏è Âª∫ËÆÆÂÖàÈÖçÁΩÆAIÊé•Âè£‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÂàÜÊûêÊïàÊûú")
                        confirm = input("ÊòØÂê¶ÁªßÁª≠‰ΩøÁî®Âü∫Á°ÄÂàÜÊûêÔºü(y/n): ").strip().lower()
                        if confirm != 'y':
                            continue
                    self.process_all_episodes()
                elif choice == '3':
                    self.show_file_status()
                elif choice == '4':
                    self.show_usage_guide()
                elif choice == '0':
                    print("\nüëã ÊÑüË∞¢‰ΩøÁî®Êô∫ËÉΩÁîµËßÜÂâßÂâ™ËæëÁ≥ªÁªüÔºÅ")
                    break
                else:
                    print("‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ•0-4")

            except KeyboardInterrupt:
                print("\n\nüëã Áî®Êà∑‰∏≠Êñ≠ÔºåÁ®ãÂ∫èÈÄÄÂá∫")
                break
            except Exception as e:
                print(f"‚ùå Êìç‰ΩúÈîôËØØ: {e}")
                input("ÊåâÂõûËΩ¶ÈîÆÁªßÁª≠...")

def main():
    """‰∏ªÂáΩÊï∞"""
    # ÂÆâË£ÖÂøÖË¶Å‰æùËµñ
    print("üîß Ê£ÄÊü•‰æùËµñ...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'openai'], check=False, capture_output=True)
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'google-generativeai'], check=False, capture_output=True)
    except:
        pass

    clipper = IntelligentTVClipper()

    # ÊòæÁ§∫ËèúÂçï
    clipper.show_main_menu()

if __name__ == "__main__":
    main()